import logging
import os
import json
import random
from datetime import datetime, timedelta

import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from aiogram.enums import ChatType
from dotenv import load_dotenv

import config
from phrases.victim_phrases import VICTIM_PHRASES
from phrases.admin_phrases import ADMIN_PHRASES
from phrases.cant_phrases import CANT_PHRASES

# ---- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise Exception("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env (BOT_TOKEN=...)")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ==== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å JSON ====

def load_json(file, default=None):
    if default is None:
        default = {}
    try:
        if not os.path.exists(file):
            return default
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ==== –í—Ä–µ–º—è –≤ TZ ====

def now_in_tz():
    tz_name = config.TIMEZONE
    tz = pytz.timezone(tz_name)
    return datetime.now(tz)

# ==== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ====

def increment_stat(chat_id, user_id):
    stats = load_json(config.STATS_FILE)
    chat_id = str(chat_id)
    user_id = str(user_id)
    if chat_id not in stats:
        stats[chat_id] = {}
    if user_id not in stats[chat_id]:
        stats[chat_id][user_id] = 0
    stats[chat_id][user_id] += 1
    save_json(config.STATS_FILE, stats)

def get_stats_for_chat(chat_id):
    stats = load_json(config.STATS_FILE)
    return stats.get(str(chat_id), {})

# ==== –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ ====

def get_admins(chat_id):
    data = load_json(config.ADMINS_FILE)
    return data.get(str(chat_id), [])

def set_admins(chat_id, admins):
    data = load_json(config.ADMINS_FILE)
    data[str(chat_id)] = admins
    save_json(config.ADMINS_FILE, data)

def add_admin(chat_id, user_id):
    admins = get_admins(chat_id)
    if user_id not in admins:
        admins.append(user_id)
        set_admins(chat_id, admins)

def del_admin(chat_id, user_id):
    admins = get_admins(chat_id)
    if user_id in admins:
        admins.remove(user_id)
        set_admins(chat_id, admins)

# ==== –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã ====

def get_custom_phrases():
    return load_json(config.CUSTOM_PHRASES_FILE, default={
        "victim": [],
        "admin": [],
        "cant": []
    })

def add_custom_phrase(phrase_type, phrase):
    phrases = get_custom_phrases()
    phrases[phrase_type].append(phrase)
    save_json(config.CUSTOM_PHRASES_FILE, phrases)

def del_custom_phrase(phrase_type, idx):
    phrases = get_custom_phrases()
    if 0 <= idx < len(phrases[phrase_type]):
        del phrases[phrase_type][idx]
        save_json(config.CUSTOM_PHRASES_FILE, phrases)
        return True
    return False

def list_phrases_by_type(phrase_type):
    file_phrases = {
        "victim": VICTIM_PHRASES,
        "admin": ADMIN_PHRASES,
        "cant": CANT_PHRASES
    }[phrase_type]
    custom_phrases = get_custom_phrases()[phrase_type]
    return file_phrases, custom_phrases

# ==== –ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ ====

def get_excluded(chat_id):
    data = load_json(config.EXCLUDE_FILE)
    return data.get(str(chat_id), [])

def add_excluded(chat_id, user_id):
    data = load_json(config.EXCLUDE_FILE)
    chat_excl = data.get(str(chat_id), [])
    if user_id not in chat_excl:
        chat_excl.append(user_id)
        data[str(chat_id)] = chat_excl
        save_json(config.EXCLUDE_FILE, data)

def del_excluded(chat_id, user_id):
    data = load_json(config.EXCLUDE_FILE)
    chat_excl = data.get(str(chat_id), [])
    if user_id in chat_excl:
        chat_excl.remove(user_id)
        data[str(chat_id)] = chat_excl
        save_json(config.EXCLUDE_FILE, data)

# ==== Settings (–∂–∏–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏) ====

def get_settings(chat_id):
    data = load_json(config.SETTINGS_FILE)
    return data.get(str(chat_id), {})

def set_setting(chat_id, key, value):
    data = load_json(config.SETTINGS_FILE)
    chat_settings = data.get(str(chat_id), {})
    chat_settings[key] = value
    data[str(chat_id)] = chat_settings
    save_json(config.SETTINGS_FILE, data)

def get_setting(chat_id, key, default=None):
    settings = get_settings(chat_id)
    return settings.get(key, default)

# ==== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ====

def get_reminder_suspend():
    return load_json(config.REMINDER_SUSPEND_FILE)

def set_reminder_suspend(chat_id, until_date):
    data = load_json(config.REMINDER_SUSPEND_FILE)
    if until_date:
        data[str(chat_id)] = until_date
    else:
        data.pop(str(chat_id), None)
    save_json(config.REMINDER_SUSPEND_FILE, data)

# ==== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ====
async def extract_user_id(message: types.Message):
    # 1. reply
    if message.reply_to_message:
        return message.reply_to_message.from_user.id
    # 2. text_mention
    if message.entities:
        for entity in message.entities:
            if entity.type == "text_mention":
                return entity.user.id
    # 3. @username (mention)
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                username = message.text[entity.offset+1:entity.offset+entity.length]
                try:
                    member = await message.bot.get_chat_member(message.chat.id, username)
                    return member.user.id
                except Exception:
                    continue
    # 4. user_id –ª—é–±—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (—Ü–∏—Ñ—Ä—ã)
    args = message.text.split()
    for arg in args[1:]:
        if arg.isdigit():
            return int(arg)
    return None

# ==== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ help ====

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    if message.chat.type in [ChatType.SUPERGROUP, ChatType.GROUP]:
        lim = get_limit_for_chat(message.chat.id)
        await message.reply(config.WELCOME_GROUP_MESSAGE.format(limit=lim))
    else:
        await message.reply(config.WELCOME_PRIVATE_MESSAGE)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    txt = (
        "ü§ñ <b>–ñ–µ—Ä—Ç–≤–∞ –¥–Ω—è</b> ‚Äî –±–æ—Ç –¥–ª—è —Ñ–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–∞—Ö.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/victim ‚Äî –≤—ã–±—Ä–∞—Ç—å –∂–µ—Ä—Ç–≤—É –¥–Ω—è\n"
        "/statistics ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π\n"
        "/set_limit N ‚Äî –ª–∏–º–∏—Ç –∂–µ—Ä–µ–±—å—ë–≤–æ–∫\n"
        "/add_admin ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞\n"
        "/del_admin ‚Äî —É–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤\n"
        "/list_admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞\n"
        "/reminder_off N ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ N –¥–Ω–µ–π\n"
        "/reminder_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/reminder_time —á –º ‚Äî –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/exclude ‚Äî –∏—Å–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/include ‚Äî –≤–µ—Ä–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/list_excluded ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö\n"
        "/phrases_source ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ—Ä–∞–∑\n"
        "/add_phrase ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É\n"
        "/del_phrase ‚Äî —É–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É\n"
        "/list_phrases ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–∞–∑—ã\n"
    )
    await message.reply(txt, parse_mode="HTML")

# ==== –û—Å–Ω–æ–≤–Ω–∞—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∞ –∏ –ª–∏–º–∏—Ç—ã ====

def get_limit_for_chat(chat_id):
    s = get_settings(chat_id)
    if "daily_limit" in s:
        return s["daily_limit"]
    return config.DAILY_LIMIT_PER_CHAT

def ensure_admin_exists(chat_id, user_id):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç"""
    admins = get_admins(chat_id)
    if not admins:
        add_admin(chat_id, user_id)

async def is_admin(message: types.Message) -> bool:
    ensure_admin_exists(message.chat.id, message.from_user.id)
    return message.from_user.id in get_admins(message.chat.id)

@dp.message(Command("victim"))
async def victim_cmd(message: types.Message):
    if message.chat.type not in [ChatType.SUPERGROUP, ChatType.GROUP]:
        await message.reply("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    ensure_admin_exists(message.chat.id, message.from_user.id)
    if not await is_admin(message):
        cant_phrases, custom_cant = list_phrases_by_type("cant")
        all_cant = cant_phrases + custom_cant
        await message.reply(random.choice(all_cant))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –¥–Ω—è–º
    settings = get_settings(message.chat.id)
    today = now_in_tz().strftime("%Y-%m-%d")
    limit = get_limit_for_chat(message.chat.id)
    last_run_date = settings.get("last_run_date", "")
    runs_today = settings.get("runs_today", 0)
    if last_run_date == today and runs_today >= limit:
        await message.reply(f"–°–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∂–µ—Ä–µ–±—å—ë–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω! ({limit}) –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –Ω–µ-–±–æ—Ç–æ–≤
    members = []
    async for member in message.bot.get_chat_members(message.chat.id):
        if not member.user.is_bot:
            members.append(member.user)

    exclude_ids = get_excluded(message.chat.id)
    candidates = [u for u in members if u.id not in exclude_ids]

    if len(candidates) < config.MIN_MEMBERS_TO_PICK:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ (–Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã {config.MIN_MEMBERS_TO_PICK}).")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ‚Äî –µ—Å–ª–∏ –∂–µ—Ä—Ç–≤–∞ —ç—Ç–æ –∞–¥–º–∏–Ω
    admins = get_admins(message.chat.id)
    victim = random.choice(candidates)
    if victim.id in admins:
        phrase_type = "admin"
    else:
        phrase_type = "victim"

    phrase_file, phrase_custom = list_phrases_by_type(phrase_type)
    pool = phrase_file + phrase_custom
    if not pool:
        await message.reply("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞! –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_phrase")
        return

    phrase = random.choice(pool)
    await message.reply(phrase.format(mention=victim.get_mention(as_html=True)), parse_mode="HTML")

    # –õ–æ–≥–∏–∫–∞ –ª–∏–º–∏—Ç–∞: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
    if last_run_date != today:
        runs_today = 1
    else:
        runs_today += 1
    set_setting(message.chat.id, "last_run_date", today)
    set_setting(message.chat.id, "runs_today", runs_today)

    increment_stat(message.chat.id, victim.id)

# ==== /statistics ====

@dp.message(Command("statistics"))
async def statistics_cmd(message: types.Message):
    if message.chat.type not in [ChatType.SUPERGROUP, ChatType.GROUP]:
        await message.reply("–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    stats = get_stats_for_chat(message.chat.id)
    if not stats:
        await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∂–µ—Ä—Ç–≤–æ–π –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    rows = []
    for user_id, count in sorted(stats.items(), key=lambda x: -x[1]):
        try:
            member = await message.bot.get_chat_member(message.chat.id, int(user_id))
            mention = member.user.get_mention(as_html=True)
        except Exception:
            mention = f"User {user_id}"
        rows.append(f"{mention} ‚Äî <b>{count}</b>")
    table = "\n".join(f"{i+1}. {row}" for i, row in enumerate(rows))
    await message.reply(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–µ—Ä—Ç–≤ –¥–Ω—è:</b>\n\n{table}", parse_mode="HTML")

# ==== /set_limit N ====

@dp.message(Command("set_limit"))
async def set_limit_cmd(message: types.Message, command: CommandObject):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç –∂–µ—Ä–µ–±—å—ë–≤–æ–∫!")
        return
    if not command.args:
        curr = get_limit_for_chat(message.chat.id)
        await message.reply(f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {curr} —Ä–∞–∑(–∞) –≤ —Å—É—Ç–∫–∏.")
        return
    try:
        n = int(command.args.strip())
        assert 1 <= n <= 100
    except Exception:
        await message.reply("–ü—Ä–∏–º–µ—Ä: /set_limit 2 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)")
        return
    set_setting(message.chat.id, "daily_limit", n)
    await message.reply(f"–õ–∏–º–∏—Ç –∂–µ—Ä–µ–±—å—ë–≤–æ–∫ —Ç–µ–ø–µ—Ä—å: {n} —Ä–∞–∑(–∞) –≤ —Å—É—Ç–∫–∏.")

# ==== –ê–¥–º–∏–Ω—ã ====

@dp.message(Command("add_admin"))
async def add_admin_cmd(message: types.Message):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return
    user_id = await extract_user_id(message)
    if not user_id:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ user_id.")
        return
    add_admin(message.chat.id, user_id)
    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞.")

@dp.message(Command("del_admin"))
async def del_admin_cmd(message: types.Message):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return
    user_id = await extract_user_id(message)
    if not user_id:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ user_id.")
        return
    del_admin(message.chat.id, user_id)
    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞.")

@dp.message(Command("list_admins"))
async def list_admins_cmd(message: types.Message):
    admins = get_admins(message.chat.id)
    if not admins:
        await message.reply("–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    mentions = []
    for uid in admins:
        try:
            member = await message.bot.get_chat_member(message.chat.id, uid)
            mentions.append(member.user.get_mention(as_html=True))
        except Exception:
            mentions.append(str(uid))
    await message.reply("–ê–¥–º–∏–Ω—ã –±–æ—Ç–∞: " + ", ".join(mentions), parse_mode="HTML")

# ==== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ====

@dp.message(Command("reminder_off"))
async def reminder_off_cmd(message: types.Message, command: CommandObject):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏!")
        return
    n_days = 1
    if command.args:
        try:
            n_days = int(command.args.strip())
            assert n_days > 0
        except Exception:
            await message.reply("–ü—Ä–∏–º–µ—Ä: /reminder_off 3 (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")
            return
    until_date = (now_in_tz() + timedelta(days=n_days)).strftime("%Y-%m-%d")
    set_reminder_suspend(message.chat.id, until_date)
    await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ {n_days} –¥–Ω–µ–π (–¥–æ {until_date})")

@dp.message(Command("reminder_on"))
async def reminder_on_cmd(message: types.Message):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏!")
        return
    set_reminder_suspend(message.chat.id, None)
    await message.reply("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")

@dp.message(Command("reminder_time"))
async def reminder_time_cmd(message: types.Message, command: CommandObject):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
        return
    parts = (command.args or "").split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /reminder_time 12 30 (—á–∞—Å—ã –º–∏–Ω—É—Ç—ã)")
        return
    try:
        hour = int(parts[0])
        minute = int(parts[1])
        assert 0 <= hour < 24 and 0 <= minute < 60
    except Exception:
        await message.reply("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 23 (—á–∞—Å—ã) –∏ –æ—Ç 0 –¥–æ 59 (–º–∏–Ω—É—Ç—ã)")
        return
    set_setting(message.chat.id, "reminder_hour", hour)
    set_setting(message.chat.id, "reminder_minute", minute)
    await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤ {hour:02d}:{minute:02d}")

# ==== –ò—Å–∫–ª—é—á–µ–Ω–∏—è ====

@dp.message(Command("exclude"))
async def exclude_cmd(message: types.Message):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    user_id = await extract_user_id(message)
    if not user_id:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ user_id.")
        return
    excl = get_excluded(message.chat.id)
    members = []
    async for member in message.bot.get_chat_members(message.chat.id):
        if not member.user.is_bot:
            members.append(member.user.id)
    non_excl = [uid for uid in members if uid not in excl and uid != user_id]
    if len(non_excl) < config.MIN_MEMBERS_TO_PICK:
        await message.reply(f"–ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤!")
        return
    add_excluded(message.chat.id, user_id)
    await message.reply("–£—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏.")

@dp.message(Command("include"))
async def include_cmd(message: types.Message):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    user_id = await extract_user_id(message)
    if not user_id:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ user_id.")
        return
    del_excluded(message.chat.id, user_id)
    await message.reply("–£—á–∞—Å—Ç–Ω–∏–∫ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∂–µ—Ä–µ–±—å—ë–≤–∫—É.")

@dp.message(Command("list_excluded"))
async def list_excluded_cmd(message: types.Message):
    excl = get_excluded(message.chat.id)
    if not excl:
        await message.reply("–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    mentions = []
    for uid in excl:
        try:
            member = await message.bot.get_chat_member(message.chat.id, uid)
            mentions.append(member.user.get_mention(as_html=True))
        except Exception:
            mentions.append(str(uid))
    await message.reply("–ò—Å–∫–ª—é—á–µ–Ω—ã: " + ", ".join(mentions), parse_mode="HTML")

# ==== –†–∞–±–æ—Ç–∞ —Å —Ñ—Ä–∞–∑–∞–º–∏ ====

@dp.message(Command("phrases_source"))
async def phrases_source_cmd(message: types.Message, command: CommandObject):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ—Ä–∞–∑.")
        return
    parts = (command.args or "").split()
    if len(parts) == 1:
        phrase_type = parts[0]
        src = get_setting(message.chat.id, "phrase_sources", {}).get(phrase_type, "all")
        await message.reply(f"–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ—Ä–∞–∑ –¥–ª—è —Ç–∏–ø–∞ {phrase_type}: {src}")
        return
    if len(parts) == 2:
        phrase_type, src = parts
        if phrase_type not in ["victim", "admin", "cant"] or src not in ["all", "file", "custom"]:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /phrases_source victim|admin|cant all|file|custom")
            return
        phrase_sources = get_setting(message.chat.id, "phrase_sources", {})
        phrase_sources[phrase_type] = src
        set_setting(message.chat.id, "phrase_sources", phrase_sources)
        await message.reply(f"–¢–µ–ø–µ—Ä—å –¥–ª—è {phrase_type} –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ—Ä–∞–∑—ã: {src}")
        return
    await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /phrases_source victim|admin|cant all|file|custom")

@dp.message(Command("add_phrase"))
async def add_phrase_cmd(message: types.Message, command: CommandObject):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–∑—ã.")
        return
    parts = (command.args or "").split(maxsplit=1)
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /add_phrase victim|admin|cant –¢–µ–∫—Å—Ç")
        return
    phrase_type, text = parts
    if phrase_type not in ["victim", "admin", "cant"]:
        await message.reply("–¢–∏–ø —Ñ—Ä–∞–∑—ã: victim, admin, cant.")
        return
    add_custom_phrase(phrase_type, text)
    await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è {phrase_type}.")

@dp.message(Command("del_phrase"))
async def del_phrase_cmd(message: types.Message, command: CommandObject):
    if not await is_admin(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ñ—Ä–∞–∑—ã.")
        return
    parts = (command.args or "").split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /del_phrase victim|admin|cant –Ω–æ–º–µ—Ä")
        return
    phrase_type, idx = parts
    if phrase_type not in ["victim", "admin", "cant"]:
        await message.reply("–¢–∏–ø —Ñ—Ä–∞–∑—ã: victim, admin, cant.")
        return
    try:
        idx = int(idx)
    except Exception:
        await message.reply("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ñ—Ä–∞–∑—ã.")
        return
    ok = del_custom_phrase(phrase_type, idx)
    if ok:
        await message.reply("–§—Ä–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.reply("–ù–µ—Ç —Ç–∞–∫–æ–π —Ñ—Ä–∞–∑—ã.")

@dp.message(Command("list_phrases"))
async def list_phrases_cmd(message: types.Message, command: CommandObject):
    parts = (command.args or "").split()
    if not parts:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /list_phrases victim|admin|cant")
        return
    phrase_type = parts[0]
    if phrase_type not in ["victim", "admin", "cant"]:
        await message.reply("–¢–∏–ø —Ñ—Ä–∞–∑—ã: victim, admin, cant.")
        return
    file_phrases, custom_phrases = list_phrases_by_type(phrase_type)
    txt = f"<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã:</b>\n"
    for i, s in enumerate(file_phrases):
        txt += f"{i}. {s}\n"
    txt += f"\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã:</b>\n"
    for i, s in enumerate(custom_phrases):
        txt += f"{i}. {s}\n"
    await message.reply(txt, parse_mode="HTML")

# ==== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ====

import asyncio

async def reminder_scheduler():
    while True:
        all_settings = load_json(config.SETTINGS_FILE)
        for chat_id, settings in all_settings.items():
            enable = settings.get("enable_reminder", True)
            hour = settings.get("reminder_hour", 12)
            minute = settings.get("reminder_minute", 0)
            tz = pytz.timezone(config.TIMEZONE)
            now = datetime.now(tz)
            if not enable:
                continue
            suspend = get_reminder_suspend()
            if str(chat_id) in suspend:
                until_str = suspend[str(chat_id)]
                until = datetime.strptime(until_str, "%Y-%m-%d")
                if now.date() <= until.date():
                    continue
            if now.hour == hour and now.minute == minute:
                last_run_date = settings.get("last_run_date", "")
                today = now.strftime("%Y-%m-%d")
                limit = settings.get("daily_limit", config.DAILY_LIMIT_PER_CHAT)
                runs_today = settings.get("runs_today", 0)
                if not (last_run_date == today and runs_today >= limit):
                    try:
                        await bot.send_message(
                            chat_id,
                            config.REMINDER_MESSAGE
                        )
                    except Exception:
                        continue
        await asyncio.sleep(60)

# ==== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram ====

async def set_bot_commands(bot: Bot):
    await bot.set_my_commands([
        types.BotCommand(command=cmd["command"], description=cmd["description"])
        for cmd in config.COMMANDS
    ])

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ====

if __name__ == "__main__":
    import asyncio

    async def main():
        await set_bot_commands(bot)
        asyncio.create_task(reminder_scheduler())
        await dp.start_polling(bot)

    asyncio.run(main())
